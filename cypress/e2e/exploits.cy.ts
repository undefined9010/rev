import { ChainId } from '@revoke.cash/chains';
import { Selectors, TEST_URL } from 'cypress/support/utils';
import { getChainName } from 'lib/utils/chains';
import type { ExploiStatus } from 'lib/utils/exploits';
import translations from '../../locales/en/exploits.json';

type Fixture = [string, string, ExploiStatus, number?];

const FIXTURES: Fixture[] = [
  ['sushiswap', '0xe126b3E5d052f1F575828f61fEBA4f4f2603652a', 'safe'],
  ['nfttrader', '0xe126b3E5d052f1F575828f61fEBA4f4f2603652a', 'affected'],
  ['paraswap', '0xe126b3E5d052f1F575828f61fEBA4f4f2603652a', 'previously_affected'],
  ['multichain-2023', '0xe126b3E5d052f1F575828f61fEBA4f4f2603652a', 'safe', ChainId.ArbitrumOne],
  ['multichain-2023', '0xe126b3E5d052f1F575828f61fEBA4f4f2603652a', 'affected', ChainId.BNBSmartChainMainnet],
  ['multichain-2023', '0xe126b3E5d052f1F575828f61fEBA4f4f2603652a', 'previously_affected', ChainId.EthereumMainnet],
];

describe('Exploit Checker', () => {
  FIXTURES.forEach(([slug, address, status, chainId = ChainId.EthereumMainnet]) => {
    const chainName = getChainName(chainId);
    it(`should return correct status for /exploits/${slug} (${chainName})`, () => {
      cy.visit(`${TEST_URL}/exploits/${slug}`, { timeout: 10_000 });
      cy.wait(1000); // Since App Router we now need this delay before the page is fully loaded -__-

      cy.get(Selectors.CHAIN_SELECT_BUTTON).click();
      cy.get(Selectors.CHAIN_SELECT_OPTION).contains(chainName).click();

      cy.get(Selectors.EXPLOIT_CHECKER_INPUT).should('exist').type(address).type('{enter}');
      cy.get(Selectors.EXPLOIT_CHECKER_LOADER, { timeout: 60_000 }).should('not.exist'); // Check that the loader is gone

      cy.get(Selectors.EXPLOIT_CHECKER_STATUS).should('contain', translations.subpages.result[status].title);
    });
  });
});

// biome-ignore lint/complexity/noUselessEmptyExport lint/suspicious/noExportsInTest: Cypress somehow wants this
export {};
